https://wszclm.github.io/yidong/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>

</body>
<script>
    // push 在数组的末尾添加一个或者多个元素
    var arr=[1,2,3];
    var newarr=arr.push(4,5,6);//参数一个或多个要添加的元素
    console.log(arr);//输出值为[1,2,3,4,5,6]
    console.log(newarr);//返回值为新数组长度6
    // pop() 删除掉数组的最后一个元素
    var arr=[1,2,3,4,5,9];
    var newarr=arr.pop();
    console.log(arr);//输出值为[1,2,3,4,5]
    console.log(newarr);//返回值为删除的数9
    // unshift() 在数组的开始位置添加一个或者多个元素
    var arr=[1,2,3,4,5,6];
    var newarr=arr.unshift(11,12,13);//要添加的一个或多个元素
    console.log(arr);//输出值为[11,12,13,1,2,3,4,5,6]
    console.log(newarr);//返回值为新数组长度9
    // shift() 在数组的开始位置删除一个元素
   var arr=[10,8,7,6,5,4];
   var newarr=arr.shift();
   console.log(arr);//输出值为[8,7,6,5,4]
   console.log(newarr);//返回值为删除的元素
    // splice() 万能的添加删除方法 返回值是删掉的值组成的数组
   var arr=[1,2,3,4,5,6];
   var newarr=arr.splice(1,2,8,"x"); // 第一个参数 操作位置；第二个参数 要删除的个数； 后续参数 表示要添加的内容
   console.log(arr);//输出值为[1,8,"x",4,5,6]
   console.log(newarr);//返回值为[2,3]被删除的数组成的集合
    // join() 将数组转化为字符串
   var arr=[1,2,3,4,5,6];
   var newarr=arr.join("*");//参数为每个字符之间所加的符号
   console.log(arr);//输出值为[1,2,3,4,5,6]
   console.log(newarr);//返回值为1*2*3*4*5*6
    // concat 将多个数组合并成一个 对于原数组没有任何影响
    var arr1=[1,5,6];
    var arr2=[2,3,4];
    var newarr=arr1.concat(arr2);
    console.log(newarr);//返回值为[1,5,6,2,3,4]
    // slice 从数组中截取指定的内容返回，不会影响原数组。
    var  arr=[11,16,25,34,12,18];
    var newarr=arr.slice(1,3);//参数为截取长度，1指从第0位逗号之后开始，3指到第三位之前的逗号结束
    console.log(newarr);//返回值为[16,25]是截取数组成的数组
    console.log(arr);//输出值[11,16,25,34,12,18]
    // sort 实现数组排序的功能 会影响数组本身
    var  arr=[11,16,25,34,12,18];
    var newarr=arr.sort(function (a, b) {    //参数为一个比较函数；a和b为相邻的两个数
        if (a>b){
            return 1;
        }else if (a<b){
            return -1;
        }
    })
    console.log(arr); //输出值为[11, 12, 16, 18, 25, 34]从小到大排列
    console.log(newarr);  //返回值[11, 12, 16, 18, 25, 34]
    var arr=[
        {name:"a",num:78},
        {name:"b",num:68},
        {name:"c",num:96},
        {name:"d",num:95}
    ];
    var newarr=arr.sort(function (a, b) {
        if (a.num>b.num){
            return 1
        }else if(a.num<b.num){
            return -1
        }
    })
    console.log(arr);//按num从小到大排列
    console.log(newarr);//按num从小到大排列

    // ES5兼容IE9 IE10；

    // forEach 遍历 数组中的元素分开显示
    var arr=[98,86,56,53,32,78,95];
    arr.forEach(function (v,i) {    //参数v：内容 i:内容的位置
        console.log(v);//显示内容
        console.log(i);//显示位置
    })
    console.log(arr);//与原数组相同
    //过滤 filter
    var arr=[98,86,56,53,32,78,95];
    var newarr=arr.filter(function (v) {  //参数指数组中单个的内容
        if (v>60){
            return true;
        }
    })
    console.log(arr);//原数组
    console.log(newarr);//返回值为原内容中大于60所组成的新数组
    // some  判断是否存在满足条件的
    var arr=[98,86,56,53,32,78,95];
    var newarr=arr.some(function (value) {  //参数指数组中单个的内容
        if (value>90){
            return true;
        }
    })
    console.log(newarr);//返回值为判断结果
    //every  判断是否都满足条件
    var arr=[98,86,56,53,32,78,95];
    var newarr=arr.every(function (value) {   //参数指数组中单个的内容
        if (value<60){
            return false;
        }
    })
    console.log(newarr); //返回值为判断结果
    // 映射
    Array.prototype.mymap=function (callback) {
        var arr=[];
        for (var i=0;i<this.length;i++){
            var r=callback(this[i],i)
            arr.push(r);
        }
        return arr;
    }   //添加新原型
    var arr=[1,2,3,4,5];
    var newarr=arr.map(function (value) {  //参数指数组中单个的内容
        return value*value;
    })
    console.log(newarr); //返回值为value*value;
    console.log(arr);    //原数组
    // indexOf 获取数组中某个值第一次出现的位置的下标
   var arr=[1,1,2,2,3,4,5,5,6,8];
   console.log(arr.indexOf(5));//输出5第一次出现的位置   参数为数组中的某个字符
   console.log(arr.lastIndexOf(1));//输出1最后一次出现的位置   参数为数组中的某个字符
    // reverse 将数组中的内容反向展示
    var arr=[1,2,3,4,5];
    arr.reverse();
    console.log(arr);
    // reduce  累加器  reduceRight
    var arr=[1,2,3,4,5];
    var num=arr.reduce(function (a,b) {
        return a+b;
    });
    console.log(num);//输出1+2+3+4+5的和

    var arr=[[1,2,3],[4,5,6],[7,8,9]];
    var arr1=[11,12,13];
    var newarr=arr.reduceRight(function (a,b) {
        return a.concat(b)
    },arr1);
    console.log(newarr);

    // ES6可能有一些新版本浏览器都不支持

    // find() 根据设置的条件进行查找，如果有满足条件的，就把这个值返回
    var arr=[1,3,5,7,9,12];
    var newarr=arr.find(function (value) {  //参数为数组中的一个内容
        if (value*value===9){
            return true;
        }
    })
    console.log(newarr);//返回值为满足条件的值，么有输出undefined
    // find() 根据设置的条件进行查找，如果有满足条件的，就把这个值的位置输出
    var arr=[1,3,5,7,9,12];
    var newarr=arr.findIndex(function (value) {  //参数为数组中的一个内容
        if (value*value===9){
            return true;
        }
    })
    console.log(newarr);//返回值为满足条件的值的位置
    // fill() 对于数组进行填充，把数组中的空值填充为某个值
   var arr=new Array(8);
   arr.fill(2);   //参数为要填充的值
   console.log(arr);   //返回值为[2,2,2,2,2,2,2,2]
    // copyWithIn() 用数组的某一部分替换掉另一部分
    var arr=[1,2,3,4,5];
    arr.copyWithin(0,4);//0:要替换的位置 4：替换的内容
    console.log(arr);
    // includes() 用来判断数组当中是否包含某个值的方法
    var arr=[1,2,3,4,5];
    console.log(arr.includes(4));
    // Array 判断是否为数组
    var arr=[1,2,3,4,5];
    console.log(Array.isArray(arr));
    // 把一个类数组 （有length的对象）转化为真正的数组Array.from
    function fn() {
        console.log(Array.from(arguments));
    }
    fn(1,2,3,4,5);//输出值为[1,2,3,4,5]
    //Array.of() 创建一个新数组
    var arr3=new Array(1,2,3,5,6);
    var arr3=Array.of(1,2,3,5,6);
    console.log(arr3);// 返回值为[1,2,3,5,6]
</script>
</html>
