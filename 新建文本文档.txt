	<script>
		//push
		//参数  添加的元素
		//返回值  新数组的长度
		//作用  在数组的末尾添加一个或者多个元素
		//例子  
		var arr=[1,2,3,4,5,6];
		var r=arr.push(7);
		console.log(r); //7
		console.log(arr);  //[1,2,3,4,5,6,7]
		//pop
		//参数 
		//返回值  删除掉的元素
		//作用  删除数组的最后一个元素
		//例子
		var arr=[1,2,3,4,5,6];
		var r=arr.pop();
		console.log(r);   //7
		console.log(arr);  //[1,2,3,4,5]
		//unshift
		//参数  添加的元素
		//返回值  新数组的长度
		//作用  在数组的开始添加一个或者多个元素
		//例子
		var arr=[1,2,3,4,5,6];
		var r=arr.unshift(1,2);
		console.log(r);  //8
		console.log(arr);  //[1,2,1,2,3,4,5,6]
		//shift
		//参数
		//返回值  删除掉的元素
		//作用   删除数组的第一个元素
		//例子
		var arr=[1,2,3,4,5,6];
		var r=arr.shift();
		console.log(r)  //1
		console.log(arr);  //[2,3,4,5,6]
		//splice
		//参数
			//第一个参数：操作的位置
			//第二个参数：要删除的个数
			//后续的参数：要添加的内容
		//返回值  删除的元素组成的数组
		//作用  万能的添加删除方法 
		//例子
		var arr=[1,2,3,4,5,6];
		var r=arr.splice(2,1);
		console.log(r);  //[3]
		console.log(arr);  //[1,2,4,5,6]
		var arr=[1,2,3,4,5,6];
		var s=arr.splice(2,1,5,6);
		console.log(s);  //[3]
		console.log(arr);  //[1,2,5,6,4,5,6]
		//join
		//参数    连接方式
		//返回值     转化后的字符串
		//作用  基于数组将数字转化为字符串，对原数组没有影响
		//例子
		var arr=[1,2,3,4,5,6];
		var str=arr.join("-");
		console.log(str);  //1-2-3-4-5-6
		console.log(arr);  //[1,2,3,4,5,6]
		//concat
		//参数   要合并的数组
		//返回值    合并后的新数组
		//作用   将多个数组合并成一个，对原数组没有任何影响
		//例子
		var arr1=[1,2,3,4,5];
		var arr2=[6,7,8,9,10];
		var arr3=[11,12,13,14,15];
		var newarr=arr1.concat(arr2,arr3);
		console.log(newarr);  //[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
		//slice
		//参数
			//第一个参数    开始截取的光标位置
			//第二个参数    结束截取的光标位置
		//返回值   截取的指定内容
		//作用   从数组中截取指定内容返回，对原数组没有任何影响
		//例子
		var arr=[1,2,3,4,5];
		var newarr=arr.slice(1,3);
		console.log(newarr);  //[2,3]
		console.log(arr);   //[1,2,3,4,5]
		//sort
		//参数
		//返回值   自身
		//作用   实现数组排序的功能，会影响数组本身
		//例子
		var arr=[1,5,2,4,3,6,8,7];
		var r=arr.sort();
		console.log(r);    //[1,2,3,4,5,6,7,8]
		console.log(arr);   //[1,2,3,4,5,6,7,8]
		var arr=[1,5,3,2,4,6,9,8,7,10,12,11];
		var r=arr.sort(function(a,b){
			if(a>b){
				return 1;
			}else{
				return -1;
			}
		});
		console.log(r);     //[1,2,3,4,5,6,7,8,9,10,11,12]
		console.log(arr);    //[1,2,3,4,5,6,7,8,9,10,11,12]
		//forEach  遍历
		//参数    数组中每个元素执行的函数
		//返回值     undefined
		//作用   把数组中的数据一个一个的全部取出来
		//例子
		var arr=[1,2,3,4,5,6];
		var newarr=arr.forEach(function(value,index){
			console.log(value);
			console.log(index);
		})
		console.log(newarr);  // undefined
		console.log(arr)  //[1,2,3,4,5,6]
		//filter  筛选
		//参数 
		//返回值   通过检查指定数组中符合条件的所有元素组成的数组
		//作用  创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。
		//例子
		var arr=[70,80,90,40,50,67];
		var newarr=arr.filter(function(value){
			if(value>60){
				return true;
			}
		})
		console.log(newarr);  //[70,80,90,67]
		console.log(arr);   //[70,80,90,40,50,67]
		//map  映射
		//参数  生成新数组元素的函数
		//返回值   被映射成的对应新数组
		//作用  原数组被“映射”成对应新数组
		//例子
		var arr=[1,2,3,4];
		var newarr=arr.map(function(value){
			return value*value;
		})
		console.log(newarr);  //[1,4,9,16]
		console.log(arr);    //[1,2,3,4]
		//some
		//参数
		//返回值   判断结果，一个布尔值
		//作用     判断数组中是否有一个满足条件的元素
		//例子
		var arr=[70,80,60,90,40,20];
		var result=arr.some(function(value,index){
			if(value>60){
				return true;
			}
		})
		console.log(result);    //ture
		//every
		//参数
		//返回值    判断结果，一个布尔值
		//作用   判断数组中每一个元素是否满足条件
		//例子
		var arr=[70,80,60,90,40,20];
		var result=arr.every(function(value,index){
			if(value>60){
				return true;
			}
		})
		console.log(result);    //false
		//indexOf
		//参数  给定的元素
		//返回值    给定的元素第一次出现的位置的下标
		//作用    获取数组中某一个值第一次出现的位置的下标
		//例子
		var arr=[1,2,2,3,4,5];
		var r=arr.indexOf(2);
		console.log(r);    //1
		//lastIndexOf
		//参数   给定的元素
		//返回值     给定的元素最后一次出现的位置的下标
		//作用   获取数组中某一个值最后一次出现的位置的下标
		//例子
		var arr=[1,2,2,3,4,5];
		var r=arr.lastIndexOf(2);
		console.log(r);    //2
		//reverse
		//参数
		//返回值    原数组里的元素反向组成的新数组
		//作用   将数组中的内容反向展示,对数组有影响
		//例子
		var arr=[1,2,3,4,5,6];
		var r=arr.reverse();
		console.log(r);   //[6,5,4,3,2,1]
		console.log(arr);    //[6,5,4,3,2,1]
		//reduce
		//参数
		//返回值     累加的结果
		//作用      将数组中的元素从左到右累加
		//例子
		var arr=[1,2,3,4,5];
		var num=arr.reduce(function(a,b){
			return a+b;
		})
		console.log(num);  //15
		console.log(arr);    //[1,2,3,4,5]
		//reduceRight
		//参数
		//返回值   累加的结果
		//作用     将数组中的元素从右到左累加
		//例子
		var arr=[[1,2,3],[4,5,6],[7,8,9]];
		var newarr=arr.reduceRight(function(a,b){
			
		})
		console.log(newarr)
		//find
		//参数
		//返回值    设置的条件
		//作用    根据我们设置的条件进行查找，如果有满足条件的，就把这个值返回
		//例子
		var arr=[10,20,30,40,50];
		var num=arr.find(function(v){
			if(v===40){
				return v;
			}
		})
		console.log(num);//40
		//findIndex
		//参数
		//返回值   设置的条件的位置
		//作用   根据我们设置的条件进行查找，如果有满足条件的，就把这个值的位置返回
		//例子
		var arr=[10,20,30,40,50];
		var site=arr.findIndex(function(v,i){
			if(v===40){
				return i;
			}
		});
		console.log(site);   //3
		//fill
		//参数    要填充的值
		//返回值     填充之后的数组
		//作用    对于数组进行填充，把数组中的空值填充为某个值，会影响原数组
		//例子
		var arr=new Array(7);
		arr.fill(1);
		console.log(arr);     //[1, 1, 1, 1, 1, 1, 1]
		//copyWithin
		//参数
			//第一个参数 从该位置开始替换数据
			//第二个参数   从该位置开始读取数据，默认为 0 。如果为负值，表示倒数
			//第三个参数   到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数
		//返回值     替换过的数组
		//作用    用数组的某一部分替换掉另一部分，会影响原数组
		//例子
		var arr=[1,2,3,4,5,6];
		arr.copyWithin(0,4,6);
		console.log(arr);     //[5, 6, 3, 4, 5, 6]
		//includes
		//参数   需要查找的元素值
		//返回值    用来判断数组中是否包含某个值的方法
		//作用    判断结果，一个布尔值
		//例子
		var arr=[1,2,3,4,5]
		var r=arr.includes(2);
		console.log(r);    //ture
	</script>
